#kernel Seed
#kernel Automaton
#kernel Blit


layout(rgba16f, set = 0, binding = 0) uniform image2D _RenderTarget;
layout(r16f, set = 0, binding = 2) uniform image2D _AutomatonFrom;
layout(r16f, set = 0, binding = 3) uniform image2D _AutomatonTo;

layout(binding = 1) uniform UniformBufferObject {
	vec4 _Exposure;
};

layout(push_constant, std430) uniform Params {
	vec2 raster_size;
	vec2 seeds;
};

float pseudo(vec2 v) {
	v = fract(v/128.)*128. + vec2(-64.340622, -72.465622);
	return fract(dot(v.xyx * v.xyy, vec3(20.390625, 60.703125, 2.4281209)));
}

[numthreads(8, 8, 1)]
void Seed() {
	ivec2 uv = ivec2(gl_GlobalInvocationID.xy);
	ivec2 size = ivec2(raster_size);
	if (uv.x >= size.x || uv.y >= size.y) return;

	float seed = pseudo(vec2(float(uv.x) * 0.1 + seeds.x, float(uv.y) * 0.1 + seeds.x * 3));

	if (seed < 0.75) seed = 0.0;
	else seed = 1.0;
	
	imageStore(_AutomatonFrom, uv, vec4(seed));
}

[numthreads(8, 8, 1)]
void Automaton() {
	ivec2 uv = ivec2(gl_GlobalInvocationID.xy);
	ivec2 size = ivec2(raster_size);
	if (uv.x >= size.x || uv.y >= size.y) return;

	int cell = int(imageLoad(_AutomatonFrom, uv).r);;

	int neighbor_count = 0;
	int neighborhood_size = 5;
	for (int x = -neighborhood_size; x <= neighborhood_size; ++x) {
		for (int y = -neighborhood_size; y <= neighborhood_size; ++y) {
			// if (x == 0 && y == 0) continue;

			ivec2 texcoords = uv + ivec2(x, y);
			texcoords.x = texcoords.x % 512;
			texcoords.y = texcoords.y % 512;

			neighbor_count += int(imageLoad(_AutomatonFrom, texcoords).r);
		}
	}

	// if (neighbor_count <= 1) cell = 0;
	// if (neighbor_count == 3) cell = 1;
	// if (neighbor_count >= 4) cell = 0;
	
	if (neighbor_count <= 33) cell = 0;
	if (34 <= neighbor_count && neighbor_count <= 45) cell = 1;
	if (58 <= neighbor_count && neighbor_count <= 121) cell = 0;

	imageStore(_AutomatonTo, uv, vec4(cell));
}

[numthreads(8, 8, 1)]
void Blit() {
	ivec2 uv = ivec2(gl_GlobalInvocationID.xy);
	ivec2 size = ivec2(raster_size);
	
	if (uv.x >= size.x || uv.y >= size.y) return;

	float automata = imageLoad(_AutomatonTo, uv / 2).r;
	
	imageStore(_RenderTarget, uv, vec4(automata, 0, 0, 1.0));
}